{
	"info": {
		"_postman_id": "12345678-1234-1234-1234-123456789012",
		"name": "Wallet Service API",
		"description": "Collection simples para testar o microservi√ßo de carteira digital\n\nComo usar:\n1. Execute 'Login' para obter token\n2. Execute os outros endpoints na sequ√™ncia\n3. Os tokens s√£o copiados automaticamente\n\nBase URL: http://localhost:8080",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "username",
			"value": "user1",
			"type": "string"
		},
		{
			"key": "password",
			"value": "user123",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "user1",
			"type": "string"
		},
		{
			"key": "access_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "refresh_token",
			"value": "",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "1. Health Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test('‚úÖ Servi√ßo est√° funcionando', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"if (pm.response.code === 200) {",
							"    console.log('üéâ Servi√ßo est√° rodando!');",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/wallets/health",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"wallets",
						"health"
					]
				},
				"description": "Verifica se o servi√ßo est√° funcionando"
			},
			"response": []
		},
		{
			"name": "2. Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test('‚úÖ Login realizado com sucesso', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"if (pm.response.code === 200) {",
							"    const response = pm.response.json();",
							"    ",
							"    // Salvar tokens automaticamente",
							"    pm.collectionVariables.set('access_token', response.accessToken);",
							"    pm.collectionVariables.set('refresh_token', response.refreshToken);",
							"    ",
							"    console.log('üîë Token salvo automaticamente!');",
							"    console.log('üë§ Usu√°rio:', response.username);",
							"    console.log('üîê Token v√°lido at√©:', new Date(Date.now() + 3600000).toLocaleString());",
							"    ",
							"    // Mostrar pr√≥ximo passo",
							"    console.log('‚û°Ô∏è  Pr√≥ximo: Execute \"3. Criar Carteira\"');",
							"} else {",
							"    console.log('‚ùå Erro no login. Verifique username/password.');",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/auth/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				},
				"description": "Fazer login e obter token JWT (execute primeiro!)"
			},
			"response": []
		},
		{
			"name": "3. Criar Carteira",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test('‚úÖ Carteira criada com sucesso', function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"if (pm.response.code === 201) {",
							"    const response = pm.response.json();",
							"    console.log('üí≥ Carteira criada!');",
							"    console.log('üí∞ Saldo inicial: R$ 0,00');",
							"    console.log('‚û°Ô∏è  Pr√≥ximo: Execute \"4. Realizar Dep√≥sito\"');",
							"} else {",
							"    console.log('‚ùå Erro ao criar carteira. Verifique se fez login.');",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userId\": \"{{userId}}\",\n    \"currency\": \"BRL\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/wallets",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"wallets"
					]
				},
				"description": "Cria uma nova carteira para o usu√°rio"
			},
			"response": []
		},
		{
			"name": "4. Realizar Dep√≥sito",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test('‚úÖ Dep√≥sito realizado com sucesso', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"if (pm.response.code === 200) {",
							"    const response = pm.response.json();",
							"    console.log('üí∞ Dep√≥sito de R$ ' + response.amount + ' realizado!');",
							"    console.log('üí≥ Novo saldo: R$ ' + response.newBalance);",
							"    console.log('‚û°Ô∏è  Pr√≥ximo: Execute \"5. Consultar Carteira\" ou \"6. Realizar Saque\"');",
							"} else {",
							"    console.log('‚ùå Erro no dep√≥sito.');",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"amount\": 100.50,\n    \"currency\": \"BRL\",\n    \"description\": \"Dep√≥sito inicial\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/wallets/{{userId}}/deposit",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"wallets",
						"{{userId}}",
						"deposit"
					]
				},
				"description": "Realiza um dep√≥sito de R$ 100,50 na carteira"
			},
			"response": []
		},
		{
			"name": "5. Consultar Carteira",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test('‚úÖ Carteira consultada com sucesso', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"if (pm.response.code === 200) {",
							"    const response = pm.response.json();",
							"    console.log('üí≥ Carteira do usu√°rio: ' + response.userId);",
							"    console.log('üí∞ Saldo atual: R$ ' + response.balance);",
							"    console.log('üìä Status: ' + response.status);",
							"    console.log('‚û°Ô∏è  Pr√≥ximo: Execute \"6. Realizar Saque\" ou \"7. Transferir\"');",
							"} else {",
							"    console.log('‚ùå Erro ao consultar carteira.');",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/wallets/{{userId}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"wallets",
						"{{userId}}"
					]
				},
				"description": "Consulta os detalhes da carteira"
			},
			"response": []
		},
		{
			"name": "6. Realizar Saque",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test('‚úÖ Saque realizado com sucesso', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"if (pm.response.code === 200) {",
							"    const response = pm.response.json();",
							"    console.log('üí∏ Saque de R$ ' + response.amount + ' realizado!');",
							"    console.log('üí≥ Novo saldo: R$ ' + response.newBalance);",
							"    console.log('‚û°Ô∏è  Pr√≥ximo: Execute \"7. Transferir\" ou \"8. Hist√≥rico\"');",
							"} else {",
							"    console.log('‚ùå Erro no saque. Verifique se tem saldo suficiente.');",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"amount\": 25.00,\n    \"currency\": \"BRL\",\n    \"description\": \"Saque teste\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/wallets/{{userId}}/withdraw",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"wallets",
						"{{userId}}",
						"withdraw"
					]
				},
				"description": "Realiza um saque de R$ 25,00 da carteira"
			},
			"response": []
		},
		{
			"name": "7. Transferir entre Carteiras",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test('‚úÖ Transfer√™ncia realizada com sucesso', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"if (pm.response.code === 200) {",
							"    const response = pm.response.json();",
							"    console.log('üí∏ Transfer√™ncia de R$ ' + response.amount + ' realizada!');",
							"    console.log('üë§ De: ' + response.sourceUserId + ' ‚Üí Para: ' + response.targetUserId);",
							"    console.log('üí≥ Seu novo saldo: R$ ' + response.sourceNewBalance);",
							"    console.log('‚û°Ô∏è  Pr√≥ximo: Execute \"8. Consultar Hist√≥rico\"');",
							"} else {",
							"    console.log('‚ùå Erro na transfer√™ncia. Verifique se tem saldo suficiente.');",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"targetUserId\": \"user2\",\n    \"amount\": 30.00,\n    \"currency\": \"BRL\",\n    \"description\": \"Transfer√™ncia teste\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/wallets/{{userId}}/transfer",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"wallets",
						"{{userId}}",
						"transfer"
					]
				},
				"description": "Transfere R$ 30,00 para o usu√°rio 'user2'"
			},
			"response": []
		},
		{
			"name": "8. Consultar Hist√≥rico de Saldo",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test('‚úÖ Hist√≥rico consultado com sucesso', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"if (pm.response.code === 200) {",
							"    const response = pm.response.json();",
							"    console.log('üìä Hist√≥rico da carteira: ' + response.userId);",
							"    console.log('üí∞ Saldo atual: R$ ' + response.currentBalance);",
							"    console.log('üìà Total de movimenta√ß√µes: ' + response.history.length);",
							"    console.log('üéâ Fluxo completo finalizado!');",
							"} else {",
							"    console.log('‚ùå Erro ao consultar hist√≥rico.');",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{access_token}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/wallets/{{userId}}/balance-history",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"wallets",
						"{{userId}}",
						"balance-history"
					]
				},
				"description": "Consulta o hist√≥rico completo de saldo da carteira"
			},
			"response": []
		},
		{
			"name": "üîß Utilit√°rios",
			"item": [
				{
					"name": "Renovar Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('‚úÖ Token renovado com sucesso', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('access_token', response.accessToken);",
									"    console.log('üîÑ Token renovado automaticamente!');",
									"    console.log('üîê Novo token v√°lido at√©:', new Date(Date.now() + 3600000).toLocaleString());",
									"} else {",
									"    console.log('‚ùå Erro ao renovar token. Fa√ßa login novamente.');",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refreshToken\": \"{{refresh_token}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/refresh",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"refresh"
							]
						},
						"description": "Renova o token de acesso (use se o token expirar)"
					},
					"response": []
				},
				{
					"name": "Validar Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('‚úÖ Token √© v√°lido', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.valid) {",
									"        console.log('‚úÖ Token est√° v√°lido!');",
									"    } else {",
									"        console.log('‚ùå Token expirado. Fa√ßa login novamente.');",
									"    }",
									"} else {",
									"    console.log('‚ùå Erro ao validar token.');",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/auth/validate",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"validate"
							]
						},
						"description": "Verifica se o token atual √© v√°lido"
					},
					"response": []
				}
			],
			"description": "Ferramentas √∫teis para gerenciar tokens"
		}
	]
} 