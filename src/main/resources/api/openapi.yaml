openapi: 3.0.3
info:
  title: Wallet Service API
  description: |
    Digital wallet microservice with hexagonal architecture and event-driven design.
    
    ## Features
    - Create and manage digital wallets
    - Perform financial operations (deposit, withdraw, transfer)
    - Query balances and history
    - Full transaction audit
    
    ## Authentication
    This API uses API Key authentication via the `X-API-Key` header.
    
    ## Rate Limiting
    - 100 requests per minute per IP
    - 1000 requests per hour per user
    
    ## Versioning
    - Current version: v1
    - Versioned endpoints: `/api/v1/*`
  version: 1.0.0
  contact:
    name: Wallet Service Team
    email: wallet-service@company.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Development environment
  - url: https://api.wallet-service.com
    description: Production environment

tags:
  - name: Wallets
    description: Wallet operations
  - name: Transactions
    description: Financial operations
  - name: Balance
    description: Balance queries
  - name: Health
    description: Monitoring and health

paths:
  /api/v1/wallets:
    post:
      tags:
        - Wallets
      summary: Create new wallet
      description: Creates a new digital wallet for a user
      operationId: createWallet
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWalletRequest'
            examples:
              brl_wallet:
                summary: BRL Wallet
                value:
                  userId: "user123"
                  currency: "BRL"
              usd_wallet:
                summary: USD Wallet
                value:
                  userId: "user456"
                  currency: "USD"
      responses:
        '201':
          description: Wallet created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletResponse'
              example:
                id: 1
                userId: "user123"
                balance:
                  amount: 0.00
                  currency: "BRL"
                status: "ACTIVE"
                createdAt: "2024-01-15T10:30:00Z"
                updatedAt: "2024-01-15T10:30:00Z"
        '400':
          description: Invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Wallet already exists for the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Rate limit exceeded
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/wallets/{userId}:
    get:
      tags:
        - Wallets
      summary: Get wallet
      description: Returns the wallet data for a user
      operationId: getWallet
      security:
        - ApiKeyAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
            example: "user123"
      responses:
        '200':
          description: Wallet found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletResponse'
        '404':
          description: Wallet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Rate limit exceeded
        '500':
          description: Internal server error

  /api/v1/wallets/{userId}/deposit:
    post:
      tags:
        - Transactions
      summary: Deposit funds
      description: Performs deposit of funds into the wallet
      operationId: depositMoney
      security:
        - ApiKeyAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
            example: "user123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionRequest'
            example:
              amount: 100.50
              currency: "BRL"
              description: "Initial deposit"
      responses:
        '200':
          description: Deposit successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletResponse'
        '400':
          description: Invalid data or incompatible currency
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Wallet not found
        '422':
          description: Wallet is not active
        '429':
          description: Rate limit exceeded
        '500':
          description: Internal server error

  /api/v1/wallets/{userId}/withdraw:
    post:
      tags:
        - Transactions
      summary: Withdraw funds
      description: Performs withdrawal of funds from the wallet
      operationId: withdrawMoney
      security:
        - ApiKeyAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
            example: "user123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionRequest'
            example:
              amount: 50.00
              currency: "BRL"
              description: "Withdrawal for payment"
      responses:
        '200':
          description: Withdrawal successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletResponse'
        '400':
          description: Invalid data or incompatible currency
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Wallet not found
        '422':
          description: Insufficient balance or wallet not active
        '429':
          description: Rate limit exceeded
        '500':
          description: Internal server error

  /api/v1/wallets/{userId}/transfer:
    post:
      tags:
        - Transactions
      summary: Transfer funds
      description: Transfers funds between wallets
      operationId: transferMoney
      security:
        - ApiKeyAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: Source user ID
          schema:
            type: string
            example: "user123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequest'
            example:
              amount: 25.00
              currency: "BRL"
              description: "Transfer to friend"
              targetUserId: "user456"
      responses:
        '200':
          description: Transfer successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferResponse'
        '400':
          description: Invalid data or incompatible currency
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Source wallet or target wallet not found
        '422':
          description: Insufficient balance or wallet not active
        '429':
          description: Rate limit exceeded
        '500':
          description: Internal server error

  /api/v1/wallets/{userId}/balance/history:
    get:
      tags:
        - Balance
      summary: Get balance history
      description: Returns the balance of the wallet for a specific date
      operationId: getBalanceHistory
      security:
        - ApiKeyAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
            example: "user123"
        - name: date
          in: query
          required: true
          description: Date for balance query
          schema:
            type: string
            format: date-time
            example: "2024-01-15T10:30:00Z"
      responses:
        '200':
          description: Balance history returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceHistoryResponse'
              example:
                userId: "user123"
                balance:
                  amount: 75.50
                  currency: "BRL"
                date: "2024-01-15T10:30:00Z"
        '404':
          description: Wallet not found
        '429':
          description: Rate limit exceeded
        '500':
          description: Internal server error

  /api/v1/wallets/{userId}/transactions:
    get:
      tags:
        - Transactions
      summary: List transactions
      description: Returns the transaction history of the wallet
      operationId: getTransactions
      security:
        - ApiKeyAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
            example: "user123"
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: size
          in: query
          description: Page size
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: type
          in: query
          description: Filter by transaction type
          schema:
            type: string
            enum: [DEPOSIT, WITHDRAW, TRANSFER]
      responses:
        '200':
          description: List of transactions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionListResponse'
        '404':
          description: Wallet not found
        '429':
          description: Rate limit exceeded
        '500':
          description: Internal server error

  /actuator/health:
    get:
      tags:
        - Health
      summary: Health Check
      description: Verifies the health of the service
      operationId: healthCheck
      responses:
        '200':
          description: Service healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: Service unhealthy

  /actuator/prometheus:
    get:
      tags:
        - Health
      summary: Prometheus Metrics
      description: Returns metrics in Prometheus format
      operationId: getMetrics
      responses:
        '200':
          description: Metrics returned
          content:
            text/plain:
              schema:
                type: string

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API Key for authentication

  schemas:
    CreateWalletRequest:
      type: object
      required:
        - userId
        - currency
      properties:
        userId:
          type: string
          pattern: '^[a-zA-Z0-9_-]+$'
          description: Unique user ID
          example: "user123"
        currency:
          type: string
          pattern: '^[A-Z]{3}$'
          description: Currency code (ISO 4217)
          example: "BRL"
      additionalProperties: false

    WalletResponse:
      type: object
      properties:
        id:
          type: integer
          description: Wallet ID
          example: 1
        userId:
          type: string
          description: User ID
          example: "user123"
        balance:
          $ref: '#/components/schemas/Money'
        status:
          type: string
          enum: [ACTIVE, SUSPENDED, CLOSED]
          description: Wallet status
          example: "ACTIVE"
        createdAt:
          type: string
          format: date-time
          description: Creation date
          example: "2024-01-15T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update date
          example: "2024-01-15T10:30:00Z"

    Money:
      type: object
      required:
        - amount
        - currency
      properties:
        amount:
          type: number
          format: decimal
          minimum: 0
          description: Monetary value
          example: 100.50
        currency:
          type: string
          pattern: '^[A-Z]{3}$'
          description: Currency code
          example: "BRL"

    TransactionRequest:
      type: object
      required:
        - amount
        - currency
      properties:
        amount:
          type: number
          format: decimal
          minimum: 0.01
          description: Transaction amount
          example: 100.50
        currency:
          type: string
          pattern: '^[A-Z]{3}$'
          description: Currency code
          example: "BRL"
        description:
          type: string
          maxLength: 500
          description: Transaction description
          example: "Initial deposit"

    TransferRequest:
      allOf:
        - $ref: '#/components/schemas/TransactionRequest'
        - type: object
          required:
            - targetUserId
          properties:
            targetUserId:
              type: string
              pattern: '^[a-zA-Z0-9_-]+$'
              description: Target user ID
              example: "user456"

    TransferResponse:
      type: object
      properties:
        sourceWallet:
          $ref: '#/components/schemas/WalletResponse'
        targetWallet:
          $ref: '#/components/schemas/WalletResponse'
        amount:
          $ref: '#/components/schemas/Money'
        description:
          type: string
          example: "Transfer to friend"
        transactionId:
          type: string
          format: uuid
          description: Transaction ID
          example: "123e4567-e89b-12d3-a456-426614174000"

    BalanceHistoryResponse:
      type: object
      properties:
        userId:
          type: string
          description: User ID
          example: "user123"
        balance:
          $ref: '#/components/schemas/Money'
        date:
          type: string
          format: date-time
          description: Query date
          example: "2024-01-15T10:30:00Z"

    TransactionListResponse:
      type: object
      properties:
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/TransactionResponse'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    TransactionResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Transaction ID
          example: "123e4567-e89b-12d3-a456-426614174000"
        type:
          type: string
          enum: [DEPOSIT, WITHDRAW, TRANSFER]
          description: Transaction type
          example: "DEPOSIT"
        amount:
          $ref: '#/components/schemas/Money'
        description:
          type: string
          description: Transaction description
          example: "Initial deposit"
        transactionDate:
          type: string
          format: date-time
          description: Transaction date
          example: "2024-01-15T10:30:00Z"
        status:
          type: string
          enum: [COMPLETED, PENDING, FAILED]
          description: Transaction status
          example: "COMPLETED"

    PaginationInfo:
      type: object
      properties:
        page:
          type: integer
          description: Current page
          example: 0
        size:
          type: integer
          description: Page size
          example: 20
        totalElements:
          type: integer
          description: Total elements
          example: 150
        totalPages:
          type: integer
          description: Total pages
          example: 8

    ErrorResponse:
      type: object
      properties:
        status:
          type: integer
          description: HTTP status code
          example: 400
        error:
          type: string
          description: Error type
          example: "Bad Request"
        message:
          type: string
          description: Error message
          example: "Invalid request parameters"
        timestamp:
          type: string
          format: date-time
          description: Error timestamp
          example: "2024-01-15T10:30:00Z"
        details:
          type: object
          description: Additional error details
          additionalProperties:
            type: string

    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [UP, DOWN]
          description: Service status
          example: "UP"
        components:
          type: object
          description: Component statuses
          properties:
            db:
              type: object
              properties:
                status:
                  type: string
                  enum: [UP, DOWN]
                  example: "UP"
            disk:
              type: object
              properties:
                status:
                  type: string
                  enum: [UP, DOWN]
                  example: "UP" 